openapi: 3.0.0
info:
  title: Home Library Service
  description: Home music library service
  version: 1.0.0

servers:
  - url: /api

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        login:
          type: string
          example: 'TestUser'
        versioin:
          type: number
        createAt:
          type: number
          example: 1655720900
        updateAt:
          type: number
          example: 1655720900
      required:
        - id
        - login
    Artist:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Freddie Mercury'
        grammy:
          type: boolean
          example: false
      required:
        - id
        - name
    Album:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Innuendo'
        artistId:
          type: string
          format: uuid
        year:
          type: integer
          example: 1991
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
      required:
        - id
        - name
        - artistId
    Track:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: The Show Must Go On
        artistId:
          type: string
          format: uuid
        albumId:
          type: string
          format: uuid
          nullable: true
        duration:
          type: integer
          description: In seconds
          example: 262
      required:
        - id
        - name
        - artistId
        - duration
    Favourites:
      type: object
      properties:
        artists:
          type: array
          items:
            type: string
            format: uuid
        albums:
          type: array
          items:
            type: string
            format: uuid
        tracks:
          type: array
          items:
            type: string
            format: uuid
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []

paths:
  /login:
    post:
      tags:
        - Login
      security: []
      summary: Login
      description: Logins a user and returns a JWT-token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                login:
                  type: string
                  description: Username
                password:
                  type: string
                  description: Password
              required:
                - user
                - login
      responses:
        200:
          description: Successful login.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                description: JWT Token
        403:
          description: Incorrect login or password
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Gets all users
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Users
      summary: Create user
      description: Creates a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                login:
                  type: string
                  description: The user's login
                password:
                  type: string
                  description: The user's password
              required:
                - login
                - password
      responses:
        200:
          description: The user has been created.
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Users
      summary: Get single user by id
      description: Get single user by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
        401:
          $ref: '#/components/responses/UnauthorizedError'
    put:
      tags:
        - Users
      summary: Update a user's password
      description: Updates a user's password by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                oldPassword:
                  type: string
                  description: The user's old password
                newPassword:
                  type: string
                  description: The user's new password
              required:
                - oldPassword
                - newPassword
      responses:
        204:
          description: The user has been updated.
        400:
          description: Bad request
        404:
          description: User not found
        401:
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
        - Users
      summary: Delete user
      description: Deletes user by ID.
      responses:
        204:
          description: The user has been deleted
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found
  /artists:
    get:
      tags:
        - Artist
      summary: Get all artists
      description: Gets all artists
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Artist
      summary: Add new artist
      description: Add new artist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                grammy:
                  type: boolean
              required:
                - name
                - grammy
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /artists/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Artist
      summary: Get single artist by id
      description: Get single artist by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Artist was not found.
    put:
      tags:
        - Artist
      summary: Update artist information
      description: Update artist information by UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                grammy:
                  type: boolean
              required:
                - name
                - grammy
      responses:
        200:
          description: The artist has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Artist was not found.
    delete:
      tags:
        - Artist
      summary: Delete artist
      description: Delete artist from library
      responses:
        204:
          description: Delelted succesfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Artist was not found.
  /tracks:
    get:
      tags:
        - Track
      summary: Get tracks list
      description: Gets all library tracks list
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Track
      summary: Add new track
      description: Add new track information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                artistId:
                  type: string
                  format: uuid
                albumId:
                  type: string
                  format: uuid
                duration:
                  type: integer
                  description: In seconds
              required:
                - name
                - artistId
                - duration
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /tracks/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Track
      summary: Get single track by id
      description: Gets single track by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Track was not found.
    put:
      tags:
        - Track
      summary: Update track information
      description: Update library track information by UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                artistId:
                  type: string
                  format: uuid
                duration:
                  type: integer
                  description: In seconds
                albumId:
                  type: string
                  format: uuid
                  nullable: true
              required:
                - name
                - artistId
                - duration
      responses:
        200:
          description: The track has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Track was not found.
    delete:
      tags:
        - Track
      summary: Delete track
      description: Delete track from library
      responses:
        204:
          description: Delelted succesfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Track was not found.
  /albums:
    get:
      tags:
        - Album
      summary: Get albums list
      description: Gets all library alibums list
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Album
      summary: Add new album
      description: Add new album information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                year:
                  type: integer
                artistId:
                  type: string
                  format: uuid
              required:
                - name
                - year
                - artistId
      responses:
        200:
          description: All library tracks list
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /albums/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Album
      summary: Get single album by id
      description: Gets single album by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Album was not found.
    put:
      tags:
        - Album
      summary: Update album information
      description: Update library album information by UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                year:
                  type: integer
                artistId:
                  type: string
                  format: uuid
              required:
                - name
                - year
                - artistId
      responses:
        200:
          description: The album has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Album was not found.
    delete:
      tags:
        - Album
      summary: Delete album
      description: Delete album from library
      responses:
        200:
          description: Deleted succesfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Album was not found.
  /favs:
    get:
      tags:
        - Favourites
      summary: Get all favourites
      description: Gets all favourites movies, tracks and books
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favourites'
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /favs/track/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favourites
      summary: Add track to the favourites
      description: Add track to the favourites
      responses:
        200:
          description: Added succesfully
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Track was not found.
    delete:
      tags:
        - Favourites
      summary: Delete track from favourites
      description: Delete track from favourites
      responses:
        200:
          description: Deleted succesfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Track was not found.
  /favs/album/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favourites
      summary: Add album to the favourites
      description: Add album to the favourites
      responses:
        200:
          description: Added succesfully
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Album was not found.
    delete:
      tags:
        - Favourites
      summary: Delete album from favourites
      description: Delete album from favourites
      responses:
        200:
          description: Deleted succesfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Album was not found.
  /favs/artist/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favourites
      summary: Add artist to the favourites
      description: Add artist to the favourites
      responses:
        200:
          description: Added succesfully
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Artist was not found.
    delete:
      tags:
        - Favourites
      summary: Delete artist from favourites
      description: Delete artist from favourites
      responses:
        200:
          description: Deleted succesfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Artist was not found.